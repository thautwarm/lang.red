# Basic Version
Token token

word    := R'[a-zA-Z_][a-z0-9A-Z_]*';
escape  := '\\' ;
newline := '\n' ;
number  := R'\d+';

bit     ::= R'0[XxOoBb][\da-fA-F]+'; # ast



symbol  ::=  ['~'] word;
# `~` means the reference.

argument::= expression ;
        
arguments 
        ::=  '(' [argument (',' argument)*] ')';

declaration Throw [':']
        ::= symbol ( [arguments] )* [':' typedef];

definition Throw ['\n', '='] 
    ::= declaration '=' newline* expression;

block Throw ['\n', '{', '}']
    ::= '{'  (newline* expression)* newline* '}';
# a = { ... } 

branch Throw ['when', 'then']
    ::= 'when' expression 'then' expression;


endOfBranch Throw ['otherwise', 'then']
    ::= 'otherwise' 'then' expression;

guard Throw ['\n'] 
    ::= (branch newline*)+ [endOfBranch]; 

# a = when false then 2
#     otherwise then 

whereSyntax
    ::= 'where' (block | definition);

expression Throw ['\n']
    ::= guard | definition [newline* whereSyntax]| dualOperation | macro;

macro
    ::= '`' expression ;

dualOperation 
    ::= unaryOperation (dualOperator unaryOperation)*;

dualOperator 
    ::=           '+' | '-' | '*' | '/' | '%'  |
                  '++'| '--'| '**'| '//'|
                  '^' | '&' | '|' | '>>'| '<<' |
                  '^^'| '&&'| '||'|
                       'and'| 'or'| 'in'|
                  '$' | '@' | '|>'| 
                  '>' | '<' | '>='| '<='|
                  '=='|
                  '<=>' |
                  '<-';

unaryHeadOperator 
    ::= 'not' | '!' | '+' | '-';
unaryLastOperator 
    ::= '??'  | '?';
unaryOperation 
    ::= unaryHeadOperator* typing [unaryLastOperator];

lambdef Throw ['(', ')', '=>']
    ::= arguments '=>' newline* expression;

typing Throw [':']
    ::= atomExpr [':' typedef] ;

atomExpr 
    ::= lambdef | atom trailer* ;

trailer 
    ::= '[' expression (',' expression)* ']' |
        '(' [expression (',' expression)*] ')' ;

decimal 
    ::=  number ['.' number] ['E' ['-'] number] ;

const
    ::= 'None' | 'False' | 'True';

anyChar := R'[^"]+';

string 
    ::= '"' ('\\' '"'| anyChar)* '"';

atom Throw ['(', ')']
    ::=  decimal | # decimal
         const   |
         symbol  |
         string  |
         symbol  |
         block    |
         '(' expression ')'|
         linkedList;

linkedList Throw ['[', ']', ',', '::', 'where', 'from']
    ::= emptyList |
        '[' expression 'where' expression 'from' expression (',' expression)* ']' |
        '[' expression (',' expression)* ['::' expression ] ['::' expression (',' expression)*] ']';

emptyList ::= '[' ']';

typedef Throw ['->']
        ::= typedef '->' typedef | generic;


generic Throw ['[', ']'] ::= symbol ( '[' typedef ']' )*;





         
         














# a b = 
#   when b < 5 = 10
#   otherwise = 20


  


















